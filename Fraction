public class Fraction extends Week3Task1 {
    int numerator, denominator;

    public int getNumerator() {
        return numerator;
    }

    public void setNumerator(int numerator) {
        this.numerator = numerator;
    }

    public int getDenominator() {
        return denominator;
    }

    public void setDenominator(int denominator) {
        if(denominator == 0){}
        else{
            this.denominator = denominator;
        }
    }

    Fraction(){
        this.numerator = 0;
        this.denominator = 1;
    }

    Fraction(int numerator, int denominator){
        try {
            double ketqua = numerator / denominator;
            this.numerator = numerator;
            this.denominator = denominator;
        }
        catch(ArithmeticException e) {
            System.out.println("khong the khoi tao");
            this.numerator = 0;
            this.denominator = 1;
        }
    }

    public Fraction reduce() {
        int i = this.gcd(this.denominator, this.numerator);
        this.numerator /= i;
        this.denominator /= i;

        if(!(this.numerator >= 0 && this.denominator > 0)){
            this.numerator = -this.numerator;
            this.denominator = -this.denominator;
        }
        return this;
    }

    public Fraction add(Fraction other){
        Fraction sum = new Fraction();
        sum.numerator = this.numerator * other.denominator + this.denominator * other.numerator;
        sum.denominator = this.denominator * other.denominator;

        sum.reduce();

        return sum;
    }

    public Fraction subtract(Fraction other){
        Fraction sub = new Fraction();
        sub.numerator = this.numerator * other.denominator - this.denominator * other.numerator;
        sub.denominator = this.denominator * other.denominator;

        sub.reduce();

        return sub;
    }

    public Fraction multiple(Fraction other) {
        Fraction mul = new Fraction();
        mul.numerator = this.numerator * other.denominator;
        mul.denominator = this.denominator * other.denominator;

        mul.reduce();

        return mul;
    }

    public Fraction divide (Fraction other){
        Fraction divd = new Fraction();
        this.reduce();
        try{
            divd.numerator = this.numerator * other.denominator;
            divd.denominator = this.denominator * other.numerator;
            double res = divd.numerator / divd.denominator;

            divd.reduce();

            return divd;
        }
        catch (ArithmeticException e){
            return this;
        }
    }

    public boolean equals(Object obj){
        if(obj instanceof Fraction) {
            Fraction other = (Fraction) obj;
            this.reduce();
            other.reduce();
            if (!((this.numerator == other.numerator && this.denominator == other.denominator) ||
                    ((this.numerator == 0 && other.numerator == 0)))) {
                return false;
            }
            return true;
        }
        else{
            return false;
        }

    }

    public static void main(String[] args) {
        Fraction F = new Fraction(-1,-5);
        Fraction R = new Fraction(0, 10);
        //System.out.println();
        Fraction temp = new Fraction();
        temp = F.divide(R);
        //temp = F.add(R);
        System.out.println(temp.getNumerator() + "/" + temp.getDenominator());
        //System.out.println(F.equals(R));

    }
}
